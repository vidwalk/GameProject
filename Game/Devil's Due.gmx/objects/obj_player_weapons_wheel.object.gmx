<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weapons_wheel_increment = 0; //weapons wheel increment
weapons_wheel[0] = 0; //Weapon wheel init
obj_player.currently_equipped_weapon = 1; //Default weapon equip

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_player_getInput(); //get input

if (scroll_up) //if you scroll up
{
if (weapons_wheel_increment+1 &gt; array_height_2d(obj_player.weapons_grid)-1) //if increment bigger than total number of available weapons
{
obj_player.currently_equipped_weapon = obj_player.weapons_grid[1] //start from beginning
weapons_wheel_increment = 1; //reset increment
}
else //else if it is not
{
while (obj_player.weapons_grid[weapons_wheel_increment+1,3]!=true)
weapons_wheel_increment++;
obj_player.currently_equipped_weapon = weapons_wheel_increment; //increase weel selection
}
}
if (scroll_down) //if you scroll down
{
if (weapons_wheel_increment-1 &lt; 0) //if increment lower than minimum
{
obj_player.currently_equipped_weapon = weapons_wheel[array_length_1d(weapons_wheel)-1] //go from top
weapons_wheel_increment = array_length_1d(weapons_wheel)-1; //reset increment to top
}
else //else if it is not
{
obj_player.currently_equipped_weapon = weapons_wheel[weapons_wheel_increment-1]; //lower sleection
weapons_wheel_increment--; //decrease increment
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(700,700,obj_player.currently_equipped_weapon)
draw_text(700,720,weapons_wheel_increment)
//draw_text(900,740,obj_player.weapons_grid[currently_equipped_weapon,5])
for (var i=0;i&lt;array_length_1d(weapons_wheel);i++)
{
draw_text(700,740+20*i,weapons_wheel[i])
draw_text(800,740+20*i,obj_player.weapons_grid[i+1,4])

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
